AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the CodePipeline.

Parameters:
  VPCCIDR:
    Description: CIDR Block for VPC
    Type: String
    Default: 10.1.0.0/16
    # AllowedValues:
    #   - 10.1.0.0/16
  PublicSubnet1Param:
    Description: Public Subnet 1
    Type: String
    Default: 10.1.11.0/24
    # AllowedValues:
    #   - 10.1.11.0/24
  PublicSubnet2Param:
    Description: Public Subnet 2
    Type: String
    Default: 10.1.12.0/24
    # AllowedValues:
    #   - 10.1.12.0/24
  ProjectTitle:
    Type: String
    Default: <ProjectTitle>
  Stage:
    Type: String
    Default: dev
  GithubUserName:
    Type: String
    Default: <USERNAME>
  GithubRepo:
    Type: String
    Default: Fargate-ECSCluster-Cloudformation
  GithubBranch:
    Type: String
    Default: <BRANCH>
  GithubOAuthToken:
    Type: String
    Default: <GITHUB ACCESS TOKEN>
  ContainerPort:
    Type: Number
    Default: 8080

Resources:

  # Create an ECS Cluster
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Cluster']]

  # # Create Private DNSNamespace
  # MyPrivateDnsNamespace:
  #   Type: "AWS::ServiceDiscovery::PrivateDnsNamespace"
  #   Properties:
  #     Vpc: !Ref VPC
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Dns']]

  # # Create a VPC
  # VPC:
  #   Type: AWS::EC2::VPC
  #   Properties: 
  #     CidrBlock: !Ref VPCCIDR
  #     EnableDnsHostnames: True
  #     EnableDnsSupport: True
  #     Tags:
  #       - Key: Name
  #         Value: !Ref ProjectTitle

  # # Create an Internet Gateway
  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway
  #   DependsOn: VPC

  # # Attach the internet gateway to the VPC
  # VPCInternetGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   DependsOn:
  #     - VPC
  #     - InternetGateway
  #   Properties: 
  #     VpcId: !Ref VPC
  #     InternetGatewayId: !Ref InternetGateway

  #   # Create a Subnet
  # SubnetA:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: VPCInternetGatewayAttachment
  #   Properties:
  #     CidrBlock: !Ref PublicSubnet1Param
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select
  #       - '0'
  #       - !GetAZs ''
  #     Tags:
  #       - Key: Name
  #         Value: !Ref ProjectTitle

  # # Create a Subnet
  # SubnetB:
  #   Type: AWS::EC2::Subnet
  #   DependsOn: VPCInternetGatewayAttachment
  #   Properties:
  #     CidrBlock: !Ref PublicSubnet2Param
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Select
  #       - '1'
  #       - !GetAZs ''
  #     Tags:
  #       - Key: Name
  #         Value: !Ref ProjectTitle

  # # Create a route table to allow access to internet
  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   DependsOn:
  #     - VPC
  #     - VPCInternetGatewayAttachment
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Name
  #         Value: Public

  # # Create a Route to allow access to internet using an internet gateway
  # PublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn:
  #     - PublicRouteTable
  #     - VPCInternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # # Attach Public Route to SubnetA
  # SubnetAPublicRouteAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   DependsOn:
  #     - PublicRouteTable
  #     - SubnetA
  #     - VPCInternetGatewayAttachment
  #   Properties: 
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref SubnetA

  # # Attach Public Route to SubnetB
  # SubnetBPublicRouteAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   DependsOn:
  #     - PublicRouteTable
  #     - SubnetB
  #     - VPCInternetGatewayAttachment
  #   Properties: 
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref SubnetB

  # # Creat a security group for load balancer and open port 80 in bound from internet
  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'LoadBalancerSecurityGroup']]
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 8090
  #         ToPort: 8090
  #         CidrIp: 0.0.0.0/0

  # # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container 
  # ContainerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ContainerSecurityGroup']]
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: !Ref ContainerPort
  #         ToPort: !Ref ContainerPort
  #         SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # # Create a LoadBalancer and attach the Security group and Subnets
  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties: 
  #     IpAddressType: ipv4
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'LoadBalancer']]
  #     Scheme: internet-facing
  #     SecurityGroups:
  #       - !Ref LoadBalancerSecurityGroup
  #     Subnets: 
  #       - !Ref SubnetA
  #       - !Ref SubnetB
  #     Type: application

  # # Create a TargetGroup for Production HTTP port 80
  # TargetGroup1:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'TargetGroup1']]
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip
  #     VpcId: !Ref VPC

  # # Create a LoadBalancerListener and attach the Production TargetGroup and LoadBalancer
  # LoadBalancerListener1:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions: 
  #       - TargetGroupArn: !Ref TargetGroup1
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP

  # # Create a TargetGroup for Test HTTP port 80
  # TargetGroup2:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'TargetGroup2']]
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip
  #     VpcId: !Ref VPC

  # # Create a LoadBalancerListener and attach the Production TargetGroup and LoadBalancer
  # LoadBalancerListener2:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions: 
  #       - TargetGroupArn: !Ref TargetGroup2
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 8090
  #     Protocol: HTTP

  # Create an ECR Repository to store docker images
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ecr-repository']]

  # Create an S3 Bucket to store build artifacts
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 's3bucket']]

  # Create Access Role for CodePipeLine
  CodePipeLineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # Create Access Role for CodeBuild
  CodeBuildExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # Create Access Role for Cloudformation
  CloudformationExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  # # Create Access Role for ECS-Tasks
  # TaskExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'TaskExecutionRole']]
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # Create Service Role for ECS
  ecsServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ecsServiceRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  # Create Service Role for ECS
  ecsServiceScaleRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ecsServiceAutoScaleRole']]
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole

  # Create the BuildProject with required Build information
  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Environment: 
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        ImagePullCredentialsType: CODEBUILD
        PrivilegedMode: True
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: ECR_REPOSITORY_URI
            Value: !Join [ ".", [ !Ref "AWS::AccountId", "dkr.ecr", !Ref "AWS::Region", !Join [ "/", [ "amazonaws.com", !Ref "ECRRepository" ] ] ] ]
      Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'BuildProject']]
      ServiceRole: !Ref CodeBuildExecutionRole
      Source:
        Type: CODEPIPELINE
        # This file (buildspec.yml In Source code) contains commands to Create and Push a docker image to the ECR_REPOSITORY_URI
        BuildSpec: buildspec.yml

  # Create CodePipeline with 3 stages (Source, Build and Deploy)
  CodePipeLine:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: S3Bucket
    Properties: 
      ArtifactStore: 
        Location: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 's3bucket']]
        Type: ArtifactStore
      Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'CodePipeLine']]
      RestartExecutionOnUpdate: False
      RoleArn: 
        Fn::GetAtt: [ CodePipeLineExecutionRole, Arn ]
        
      Stages:

        # Download source code from Github Repo to source-output-artifacts path in S3 Bucket
        - Name: Source
          Actions: 
          - Name: Source
            ActionTypeId: 
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: 1
            Configuration:
              Repo: !Ref GithubRepo
              Branch: !Ref GithubBranch
              Owner: !Ref GithubUserName
              OAuthToken: !Ref GithubOAuthToken
            RunOrder: 1
            OutputArtifacts:
              - Name: source-output-artifacts
        
        # Build the project using the BuildProject and Output build artifacts to build-output-artifacts path in S3 Bucket
        - Name: Build
          Actions:
          - Name: Build
            ActionTypeId:
              Category: Build
              Owner: AWS
              Version: 1
              Provider: CodeBuild
            OutputArtifacts:
              - Name: build-output-artifacts
            InputArtifacts:
              - Name: source-output-artifacts
            Configuration:
                ProjectName: !Ref BuildProject
            RunOrder: 1

        # Deploy the project by executing Fargate-Cluster.yml file in the Source code with Cloudformation.
        - Name: Deploy
          Actions:
          - Name: Deploy
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 1
              Provider: CloudFormation
            InputArtifacts:
              - Name: source-output-artifacts
              - Name: build-output-artifacts
            Configuration:
                ActionMode: CREATE_UPDATE
                Capabilities: [
                    "CAPABILITY_AUTO_EXPAND",
                    "CAPABILITY_IAM",
                    "CAPABILITY_NAMED_IAM"
                    ]
                # Pass parameter values to Fargate-Cluster2.yml for deployment
                ParameterOverrides: !Sub |
                  {
                    "ImageURI" : { "Fn::GetParam" : ["build-output-artifacts", "imageDetail.json", "ImageURI"] },
                    "Stage":  "${Stage}",
                    "ContainerPort": "${ContainerPort}"
                  }
                RoleArn: 
                  Fn::GetAtt: [ CloudformationExecutionRole, Arn ]
                StackName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'FargateECSCluster']]
                TemplatePath: source-output-artifacts::Cloudformation/Fargate-Cluster2.yml
            RunOrder: 1