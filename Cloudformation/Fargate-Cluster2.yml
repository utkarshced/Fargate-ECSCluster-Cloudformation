AWSTemplateFormatVersion: 2010-09-09
Description: The CloudFormation template for the Fargate ECS Cluster.

Parameters:
  Stage:
    Type: String
  ContainerPort:
    Type: Number
  ImageURI:
    Type: String

# Resources:

#   # Create an ECS Cluster
#   Cluster:
#     Type: AWS::ECS::Cluster
#     Properties:
#       ClusterName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Cluster']]

#   # Create a VPC
#   VPC:
#     Type: AWS::EC2::VPC
#     Properties: 
#       CidrBlock: 172.10.0.0/16
#       EnableDnsHostnames: True
#       EnableDnsSupport: True

  # # Create a Subnet
  # SubnetA:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     CidrBlock: 172.10.1.0/24
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Join ['', [!Ref "AWS::Region", 'a']]

  # # Create a Subnet
  # SubnetB:
  #   Type: AWS::EC2::Subnet
  #   Properties:
  #     CidrBlock: 172.10.2.0/24
  #     VpcId: !Ref VPC
  #     AvailabilityZone: !Join ['', [!Ref "AWS::Region", 'b']]

  # # Create a route table to allow access to internet
  # PublicRouteTable:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref VPC

  # # Create a Route to allow access to internet using an internet gateway
  # PublicRoute:
  #   Type: AWS::EC2::Route
  #   DependsOn: VPCInternetGatewayAttachment
  #   Properties:
  #     RouteTableId: !Ref PublicRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     GatewayId: !Ref InternetGateway

  # # Attach Public Route to SubnetA
  # SubnetAPublicRouteAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties: 
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref SubnetA

  # # Attach Public Route to SubnetB
  # SubnetBPublicRouteAssociation:
  #   Type: AWS::EC2::SubnetRouteTableAssociation
  #   Properties: 
  #     RouteTableId: !Ref PublicRouteTable
  #     SubnetId: !Ref SubnetB

  # # Create an Internet Gateway
  # InternetGateway:
  #   Type: AWS::EC2::InternetGateway

  # # Attach the internet gateway to the VPC
  # VPCInternetGatewayAttachment:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Properties: 
  #     InternetGatewayId: !Ref InternetGateway
  #     VpcId: !Ref VPC

  # # Create Access Role for ECS-Tasks
  # ExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     RoleName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ExecutionRole']]
  #     AssumeRolePolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  # Create a TaskDefinition with container details
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Container']]
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort

  # # Creat a security group for load balancer and open port 80 in bound from internet
  # LoadBalancerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'LoadBalancerSecurityGroup']]
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: 80
  #         ToPort: 80
  #         CidrIp: 0.0.0.0/0
  #       - IpProtocol: tcp
  #         FromPort: 8080
  #         ToPort: 8080
  #         CidrIp: 0.0.0.0/0

  # # Creat a security group for Containers and open in bound Container port from Load balancer security group to the Container 
  # ContainerSecurityGroup:
  #   Type: AWS::EC2::SecurityGroup
  #   Properties:
  #     GroupDescription: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ContainerSecurityGroup']]
  #     VpcId: !Ref VPC
  #     SecurityGroupIngress:
  #       - IpProtocol: tcp
  #         FromPort: !Ref ContainerPort
  #         ToPort: !Ref ContainerPort
  #         SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  # # Create a LoadBalancer and attach the Security group and Subnets
  # LoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties: 
  #     IpAddressType: ipv4
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'LoadBalancer']]
  #     Scheme: internet-facing
  #     SecurityGroups:
  #       - !Ref LoadBalancerSecurityGroup
  #     Subnets: 
  #       - !Ref SubnetA
  #       - !Ref SubnetB
  #     Type: application

  # # Create a TargetGroup for Production HTTP port 80
  # TargetGroup1:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'TargetGroup1']]
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip
  #     VpcId: !Ref VPC

  # # Create a LoadBalancerListener and attach the Production TargetGroup and LoadBalancer
  # LoadBalancerListener1:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions: 
  #       - TargetGroupArn: !Ref TargetGroup1
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 80
  #     Protocol: HTTP

  # # Create a TargetGroup for Test HTTP port 80
  # TargetGroup2:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'TargetGroup2']]
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip
  #     VpcId: !Ref VPC

  # # Create a LoadBalancerListener and attach the Production TargetGroup and LoadBalancer
  # LoadBalancerListener2:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     DefaultActions: 
  #       - TargetGroupArn: !Ref TargetGroup2
  #         Type: forward
  #     LoadBalancerArn: !Ref LoadBalancer
  #     Port: 8090
  #     Protocol: HTTP

  # # Create an ECS Service and add created Cluster, TaskDefintion, Subnets, TargetGroup and SecurityGroup
  # ECSService:
  #   Type: AWS::ECS::Service
  #   DependsOn: LoadBalancerListener
  #   Properties:
  #     ServiceName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'ECSService']]
  #     Cluster: !Ref Cluster
  #     TaskDefinition: !Ref TaskDefinition
  #     DesiredCount: 2
  #     LaunchType: FARGATE
  #     NetworkConfiguration: 
  #       AwsvpcConfiguration:
  #         AssignPublicIp: ENABLED
  #         Subnets:
  #           - !Ref SubnetA
  #           - !Ref SubnetB
  #         SecurityGroups:
  #           - !Ref ContainerSecurityGroup
  #     LoadBalancers:
  #       - ContainerName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Container']]
  #         ContainerPort: !Ref ContainerPort
  #         TargetGroupArn: !Ref TargetGroup
  Transform:
  - 'AWS::CodeDeployBlueGreen'
Hooks:
  CodeDeployBlueGreenHook:
    Properties:
      TrafficRoutingConfig:
        Type: TimeBasedCanary
        TimeBasedCanary:
          StepPercentage: 15
          BakeTimeMins: 5
      Applications:
        - Target:
            Type: 'AWS::ECS::Service'
            LogicalID: ECSDemoService
          ECSAttributes:
            TaskDefinitions:
              - BlueTaskDefinition
              - GreenTaskDefinition
            TaskSets:
              - BlueTaskSet
              - GreenTaskSet
            TrafficRouting:
              ProdTrafficRoute:
                Type: 'AWS::ElasticLoadBalancingV2::Listener'
                LogicalID: ALBListenerProdTraffic
              TargetGroups:
                - ALBTargetGroupBlue
                - ALBTargetGroupGreen
    Type: 'AWS::CodeDeploy::BlueGreen'
Resources:
  ExampleSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for ec2 access
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8090
          ToPort: 8090
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
  ALBTargetGroupBlue:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  ALBTargetGroupGreen:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckPort: '8080'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Group
          Value: Example
      TargetType: ip
      UnhealthyThresholdCount: 4
      VpcId: !Ref Vpc
  ExampleALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ExampleSecurityGroup
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
      Tags:
        - Key: Group
          Value: Example
      Type: application
      IpAddressType: ipv4
  ALBListenerProdTraffic:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      LoadBalancerArn: !Ref ExampleALB
      Port: 80
      Protocol: HTTP
  ALBListenerProdRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ALBTargetGroupBlue
                Weight: 1
      Conditions:
        - Field: http-header
          HttpHeaderConfig:
            HttpHeaderName: User-Agent
            Values:
              - Mozilla
      ListenerArn: !Ref ALBListenerProdTraffic
      Priority: 1
  # ECSTaskExecutionRole:
  #   Type: 'AWS::IAM::Role'
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: ''
  #           Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: 'sts:AssumeRole'
  #     ManagedPolicyArns:
  #       - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  BlueTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties: 
      Memory: 1024
      Cpu: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - 'FARGATE'
      TaskRoleArn: !Ref ExecutionRole
      ExecutionRoleArn: !Ref ExecutionRole
      ContainerDefinitions:
        - Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Container']]
          Image: !Ref ImageURI
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              HostPort: !Ref ContainerPort
  # BlueTaskDefinition:
  #   Type: 'AWS::ECS::TaskDefinition'
  #   Properties:
  #     ExecutionRoleArn: !GetAtt 
  #       - ECSTaskExecutionRole
  #       - Arn
  #     ContainerDefinitions:
  #       - Name: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Container']]
  #         Image: !Ref ImageURI
  #         PortMappings:
  #           - ContainerPort: !Ref ContainerPort
  #             HostPort: !Ref ContainerPort
  #     RequiresCompatibilities:
  #       - FARGATE
  #     NetworkMode: awsvpc
  #     Cpu: '256'
  #     Memory: '512'
  #     Family: ecs-demo
  ECSDemoCluster:
    Type: 'AWS::ECS::Cluster'
    Properties: {}
  ECSDemoService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Cluster']]
      DesiredCount: 1
      DeploymentController:
        Type: EXTERNAL
  BlueTaskSet:
    Type: 'AWS::ECS::TaskSet'
    Properties:
      Cluster: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Cluster']]
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsVpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ExampleSecurityGroup
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
      PlatformVersion: 1.4.0
      Scale:
        Unit: PERCENT
        Value: 100
      Service: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Service']]
      TaskDefinition: !Ref BlueTaskDefinition
      LoadBalancers:
        - ContainerName: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Container']]
          ContainerPort: 80
          TargetGroupArn: !Ref ALBTargetGroupBlue
  PrimaryTaskSet:
    Type: 'AWS::ECS::PrimaryTaskSet'
    Properties:
      Cluster: !Ref ECSDemoCluster
      Service: !Join ['-', [!Ref Stage, !Ref ProjectTitle, 'Service']]
      TaskSetId: !GetAtt 
        - BlueTaskSet
        - Id